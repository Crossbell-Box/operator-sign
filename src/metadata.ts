/* eslint-disable */
export default async () => {
    const t = {
        ["crossbell.js/dist"]: await import("crossbell.js/dist"),
        ["./module/op/transaction/note/note.dto"]: await import("./module/op/transaction/note/note.dto"),
        ["./module/op/transaction/character/character.dto"]: await import("./module/op/transaction/character/character.dto"),
        ["./module/op/transaction/csb/csb.dto"]: await import("./module/op/transaction/csb/csb.dto"),
        ["./module/op/transaction/link/link.dto"]: await import("./module/op/transaction/link/link.dto")
    };
    return { "@nestjs/swagger": { "models": [[import("./module/op/siwe/siwe.dto"), { "SiweChallengeBody": { address: { required: true }, domain: { required: true, type: () => String }, uri: { required: true, type: () => String }, statement: { required: true, type: () => String, default: "Sign-in with Crossbell (or Ethereum)" } }, "SiweLoginBody": { address: { required: true }, signature: { required: true, type: () => String } } }], [import("./module/op/transaction/base/base.dto"), { "TransactionResponse": { transactionHash: { required: true, type: () => String }, data: { required: false } } }], [import("./module/op/transaction/character/character.dto"), { "SetHandleBody": { handle: { required: true, type: () => String, maxLength: 32, pattern: "/^[a-z0-9\\-\\_]+$/" } }, "SetHandleResponse": { data: { required: true, type: () => Boolean } }, "SetMetadataBody": { metadata: { required: true, type: () => t["crossbell.js/dist"].CharacterMetadata }, mode: { required: false, type: () => Object, default: "merge" } }, "SetMetadataResponse": { data: { required: true, type: () => String } }, "AddOperatorBody": { operator: { required: true } }, "AddOperatorResponse": { data: { required: true } }, "RemoveOperatorParam": { operator: { required: true } } }], [import("./module/http/v1/base/base.dto"), { "AddressParam": { address: { required: true, type: () => String } }, "ListResponse": { list: { required: true }, count: { required: true, type: () => Number }, cursor: { required: true, type: () => String, nullable: true } }, "CharacterIdParam": { characterId: { required: true, type: () => Number } }, "CharacterHandleParam": { handle: { required: true, type: () => String } }, "NoteComposedIdParam": { noteId: { required: true, type: () => Number } }, "MintedNoteComposedIdParam": { contractAddress: { required: true, type: () => String }, tokenId: { required: true, type: () => Number } }, "Erc721ComposedIdParam": { contractAddress: { required: true, type: () => String }, tokenId: { required: true, type: () => Number } }, "LinklistIdParam": { linklistId: { required: true, type: () => Number } }, "TransactionHashAndLogIndexParam": { transactionHash: { required: true, type: () => String }, logIndex: { required: true, type: () => Number } }, "FeedIdParam": {}, "AnyUriParam": { uri: { required: true, type: () => String } }, "NotesMetricsQuery": { recent: { required: false, type: () => Number, default: 7 } }, "OwnersMetricsQuery": { nonTest: { required: false, type: () => Boolean, default: true }, outstanding: { required: false, type: () => Boolean, default: true }, frequency: { required: false, type: () => String } }, "CharactersMetricsQuery": { nonTest: { required: false, type: () => Boolean, default: true }, active: { required: false, type: () => Boolean, default: true }, frequency: { required: false, type: () => String } }, "PaginationQuery": { cursor: { required: false, type: () => String }, limit: { required: false, type: () => Number, default: 20 } } }], [import("./module/op/transaction/csb/csb.dto"), { "GetCsbBalanceResponse": { balance: { required: true, type: () => String } } }], [import("./module/op/transaction/link/link.dto"), { "LinkCharacterParam": { toCharacterIdOrToAddress: { required: true, type: () => Object }, linkType: { required: true, type: () => String } }, "LinkCharacterBody": { data: { required: false } }, "LinkCharacterResponse": {}, "LinkCharactersInBatchBody": { toCharacterIds: { required: true, type: () => [Number] }, toAddresses: { required: true }, linkType: { required: true, type: () => String }, data: { required: false } }, "UnlinkCharacterParam": { toCharacterId: { required: true, type: () => Number }, linkType: { required: true, type: () => String } }, "UnlinkCharacterResponse": { data: { required: true, type: () => Boolean } }, "LinkNoteParam": { toCharacterId: { required: true, type: () => Number }, toNoteId: { required: true, type: () => Number }, linkType: { required: true, type: () => String } }, "LinkNoteBody": { data: { required: false } }, "LinkNoteResponse": {}, "UnlinkNoteParam": { toCharacterId: { required: true, type: () => Number }, toNoteId: { required: true, type: () => Number }, linkType: { required: true, type: () => String } }, "UnlinkNoteResponse": { data: { required: true, type: () => Boolean } } }], [import("./module/op/transaction/note/note.dto"), { "PostNoteBody": { metadata: { required: true, type: () => t["crossbell.js/dist"].NoteMetadata }, locked: { required: false, type: () => Boolean }, linkItemType: { required: false, type: () => Object } }, "PostNoteResponse": {}, "SetNoteMetadataBody": { metadata: { required: true, type: () => t["crossbell.js/dist"].NoteMetadata }, mode: { required: false, type: () => Object, default: "merge" } }, "SetNoteMetadataResponse": {}, "NoteIdParam": { noteId: { required: true, type: () => Number } }, "LockNoteResponse": { data: { required: true, type: () => Boolean } }, "DeleteNoteResponse": { data: { required: true, type: () => Boolean } }, "MintNoteResponseData": { contractAddress: { required: true }, tokenId: { required: true, type: () => Number } }, "MintNoteResponse": { data: { required: true, type: () => t["./module/op/transaction/note/note.dto"].MintNoteResponseData } } }], [import("./module/http/generated/characterOperator.entity"), { "CharacterOperatorEntity": { characterId: { required: false, type: () => Number }, operator: { required: false, type: () => String }, permissions: { required: false, type: () => [Object] }, createdAt: { required: false, type: () => Date }, updatedAt: { required: false, type: () => Date }, transactionHash: { required: false, type: () => String }, blockNumber: { required: false, type: () => Number }, logIndex: { required: false, type: () => Number }, updatedTransactionHash: { required: false, type: () => String }, updatedBlockNumber: { required: false, type: () => Number }, updatedLogIndex: { required: false, type: () => Number } } }], [import("./module/http/generated/connect-characterOperator.dto"), { "ConnectCharacterOperatorDto": {} }], [import("./module/http/generated/create-characterOperator.dto"), { "CreateCharacterOperatorDto": { characterId: { required: false, type: () => Number }, operator: { required: false, type: () => String }, permissions: { required: false, type: () => [Object] }, createdAt: { required: false, type: () => Date }, updatedAt: { required: false, type: () => Date }, transactionHash: { required: false, type: () => String }, blockNumber: { required: false, type: () => Number }, logIndex: { required: false, type: () => Number }, updatedTransactionHash: { required: false, type: () => String }, updatedBlockNumber: { required: false, type: () => Number }, updatedLogIndex: { required: false, type: () => Number } } }], [import("./module/http/generated/update-characterOperator.dto"), { "UpdateCharacterOperatorDto": { characterId: { required: true, type: () => Number }, operator: { required: true, type: () => String }, permissions: { required: true, type: () => [Object] }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date }, transactionHash: { required: true, type: () => String }, blockNumber: { required: true, type: () => Number }, logIndex: { required: true, type: () => Number }, updatedTransactionHash: { required: true, type: () => String }, updatedBlockNumber: { required: true, type: () => Number }, updatedLogIndex: { required: true, type: () => Number } } }], [import("./module/http/generated/connect-eventPoint.dto"), { "ConnectEventPointDto": { eventName: { required: false, type: () => String } } }], [import("./module/http/generated/create-eventPoint.dto"), { "CreateEventPointDto": { eventName: { required: false, type: () => String }, blockNumber: { required: false, type: () => Number }, transactionHash: { required: true, type: () => String } } }], [import("./module/http/generated/update-eventPoint.dto"), { "UpdateEventPointDto": { blockNumber: { required: true, type: () => Number }, transactionHash: { required: true, type: () => String } } }], [import("./module/http/generated/eventPoint.entity"), { "EventPointEntity": { eventName: { required: false, type: () => String }, blockNumber: { required: false, type: () => Number }, transactionHash: { required: false, type: () => String, nullable: true } } }], [import("./module/http/generated/connect-opSignUser.dto"), { "ConnectOpSignUserDto": { address: { required: false, type: () => String } } }], [import("./module/http/generated/create-opSignUser.dto"), { "CreateOpSignUserDto": { address: { required: false, type: () => String }, createdAt: { required: false, type: () => Date }, updatedAt: { required: false, type: () => Date } } }], [import("./module/http/generated/update-opSignUser.dto"), { "UpdateOpSignUserDto": { createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date } } }], [import("./module/http/generated/opSignUser.entity"), { "OpSignUserEntity": { address: { required: false, type: () => String }, csbSpent: { required: false, type: () => String }, csbRecharged: { required: false, type: () => String }, createdAt: { required: false, type: () => Date }, updatedAt: { required: false, type: () => Date } } }]], "controllers": [[import("./module/otel/otel.controller"), { "OtelController": { "getMetrics": { type: String } } }], [import("./module/op/siwe/siwe.controller"), { "SiweController": { "genNonce": {}, "login": {}, "getMe": {}, "demo": {} } }], [import("./module/op/transaction/character/character.controller"), { "SiweCharacterController": { "setCharacterMetadata": { type: t["./module/op/transaction/character/character.dto"].SetMetadataResponse } } }], [import("./module/op/transaction/csb/csb.controller"), { "SiweCsbController": { "getCsbBalance": { type: t["./module/op/transaction/csb/csb.dto"].GetCsbBalanceResponse } } }], [import("./module/op/transaction/link/link.controller"), { "SiweLinkController": { "linkCharacter": { type: t["./module/op/transaction/link/link.dto"].LinkCharacterResponse }, "linkCharactersInBatch": { type: t["./module/op/transaction/link/link.dto"].LinkCharacterResponse }, "unlinkCharacter": { type: t["./module/op/transaction/link/link.dto"].UnlinkCharacterResponse }, "linkNote": { type: t["./module/op/transaction/link/link.dto"].LinkNoteResponse }, "unlinkNote": { type: t["./module/op/transaction/link/link.dto"].UnlinkNoteResponse } } }], [import("./module/op/transaction/note/note.controller"), { "SiweNoteController": { "postNote": { type: t["./module/op/transaction/note/note.dto"].PostNoteResponse }, "setNoteMetadata": { type: t["./module/op/transaction/note/note.dto"].SetNoteMetadataResponse }, "lockNote": { type: t["./module/op/transaction/note/note.dto"].LockNoteResponse }, "deleteNote": { type: t["./module/op/transaction/note/note.dto"].LockNoteResponse }, "mintNote": { type: t["./module/op/transaction/note/note.dto"].MintNoteResponse } } }]] } };
};